a = 1
x = seq(1:1000)
y = fun(a,x)
plot(log(y)~ x)
plog(y ~ x)
plot(y ~ x)
a = 1/3
x = seq(1:1000)
y = fun(a,x)
log(y)
plot(log(y)~ x)
plot(y ~ x)
plot(y/a ~ x)
plot(y ~ x)
plot(log(y)~ x)
fun2 = function (a, x) { (1+a/x)^n }
x = seq(1,1000)
fun2 = function (a, x) { (1+a/x)^n }
y2 = fun2( a, x )
x = seq(1,1000)
n = 2
fun2 = function (a, x) { (1+a/x)^n }
y2 = fun2( a, x )
plot( y2 ~ x )
plot( log(y2) ~ x )
plot( y2 ~ x )
plot( log(y2) ~ x )
x = seq(10,1000, by=10)
n = 2
fun2 = function (a, x) { (1+a/x)^n }
y2 = fun2( a, x )
plot( y2 ~ x )
x = seq(100,1000, by=10)
n = 2
plot( log(y2) ~ x )
x = seq(100,1000, by=10)
n = 2
fun2 = function (a, x) { (1+a/x)^n }
y2 = fun2( a, x )
plot( y2 ~ x )
plot( log(y2) ~ x )
y2 = fun2( a, x )
ye = exp((n-1)*x)
plot( y2 ~ x )
plot( log(y2) ~ x )
plot( y2 ~ ye)
ye
x = seq(0,100, by=1)
n = 2
a = 1
fun2 = function (a, x) { (1+ x/a )^n }
y2 = fun2( a, x )
ye = exp((n-1)*x)
plot( y2 ~ x )
ye = exp((n-1)*x)
plot( y2 ~ x )
plot( log(y2) ~ x )
plot( y2 ~ ye)
ye
x = seq(0,10, by=0.2)
n = 2
a = 1
fun2 = function (a, x) { (1+ x/a )^n }
y2 = fun2( a, x )
ye = exp((n-1)*x)
plot( y2 ~ x )
plot( log(y2) ~ x )
plot( y2 ~ ye)
x = seq(0,2, by=0.05)
n = 2
a = 1
fun2 = function (a, x) { (1+ x/a )^n }
y2 = fun2( a, x )
ye = exp((n-1)*x)
plot( y2 ~ x )
plot( log(y2) ~ x )
plot( y2 ~ ye)
x = rnorm(100)
hist(x)
x = rnorm(1000)
hist(x)
x = rnorm(1000)
hist(x, br=20)
gset <- getGEO(myGSE, GSEMatrix =TRUE)
if (length(gset) > 1) idx <- grep("GPL90", attr(gset, "names")) else idx <- 1
gset <- gset[[idx]]
require(GEOquery)
http://www.ncbi.nlm.nih.gov/geo/browse/
GEO2R
myGSE = "GSE3821" # qin, demo
gset <- getGEO(myGSE, GSEMatrix =TRUE)
if (length(gset) > 1) idx <- grep("GPL90", attr(gset, "names")) else idx <- 1
gset <- gset[[idx]]
fix(gset)
ex <- exprs(gset) #This is the expression matrix
Find out probes and ORFs
dictionary = gset@featureData@data[, c('ID', 'ORF')]  #This is a lookup table for probe ID and ORF
View(dictionary)
ORFs = unique(as.character(dictionary$ORF))
yORFs = ORFs[grep( "Y\\w{2}\\d{3}.*", ORFs)]  #these are yeast ORFs
str(yORFs)
setdiff(ORFs, yORFs)
ORFs = yORFs
A simple approach to create an expression matrix with ORFs as row names
This approach takes only one probe for each ORFs, which is often true for cDNA arrays
ex2 = ex[match(ORFs, dictionary$ORF), ]
rownames(ex2) = ORFs
head(ex2) #Now, expression matrix is named by ORFs
Another approach is to calculate the average sigals for all the probes in the same ORFs
multipleProbedORFs = NA;
ex3 = ex2 #This is just a template
orf = 'YLR331C'
for (orf in ORFs) {
myrows = as.character( dictionary$ID[dictionary$ORF==orf] )
if (length(myrows) > 1) {
print (orf)
multipleProbedORFs = c(multipleProbedORFs, orf)
ex[myrows, ] = apply(ex[myrows,], 2, mean)
}else {
ex3[orf, ] = ex[myrows[1], ]
}
normalization of expression data between experiments
each colum is a seprate experiment
colSums = apply(ex3, 2, sum)  #get total intensity of each experiment
colSums/1E6
ex3norm = ex3  #just generate a template
for( col in 1:length(ex3[1,])) { #go over each column
ex3norm[,col] = ex3[,col] * max(colSums) / sum(ex3[,col])
individual signals * maxExperimentTotal / Total Signal of the current experiment
}
apply(ex3norm, 2, sum) / max(colSums)
ex3 = ex3norm
hist(ex3[,1], br=100)
1
1+1
virus_num = 1E31
rirus_num
virus_num
Obs = c(3, 0)
Exp = c(2.5, 1)
tb = rbind( Obs, Exp)
tb
?chi.test
?chisq.test
chisq.test(tb)
Obs = c(3, 0)
Exp = c(10, 1)
tb = rbind( Obs, Exp)
Obs = c(3, 0)
Exp = c(10, 1)
tb = rbind( Obs, Exp)
chiseq.est(tb)
Obs = c(3, 0)
Exp = c(10, 1)
tb = rbind( Obs, Exp)
chisq.est(tb)
Obs = c(3, 0)
Exp = c(10, 1)
tb = rbind( Obs, Exp)
chisq.test(tb)
Obs = c(1, 10)
Exp = c(10, 1)
tb = rbind( Obs, Exp)
chisq.test(tb)
Obs = c(1, 10, 30)
Exp = c(30, 20, 1)
tb = rbind( Obs, Exp)
chisq.test(tb)
write.csv(tb,"test.txt")
chisq.test
Obs = c(1, 10, 30)
Exp = c(30, 20, 1)
tb = rbind( Obs, Exp)
chisq.test(tb)
sum( (Obs - Exp)^2/Exp )
Pearson_stat = sum( (Obs - Exp)^2/Exp )
pchisq
? pchisq
? pchisq( Pearson_stat, 1)
pchisq( Pearson_stat, 1)
Obs = c(1, 5)
Exp = c(10, 1)
tb = rbind( Obs, Exp)
chisq.test(tb)
Pearson_stat = sum( (Obs - Exp)^2/Exp )
pchisq(Pearson_stat, 1)
Pearson_stat
1 - pchisq(Pearson_stat, 1)
chisq.test( Obs, Exp)
Obs
Exp
Obs = c(1, 5)
Exp = c(10, 1)
tb = rbind( Obs, Exp)
chisq.test(tb)
Obs = c(1, 5)
Exp = c(10, 1)
Prob= Exp / sum(Exp)
tb = rbind( Obs, Exp)
chisq.test( Obs, p=Prob)
Obs = c(1, 9)
Exp = c(9, 1)
Prob= Exp / sum(Exp)
chisq.test(tb)
chisq.test( Obs, p=Prob)
Pearson_stat = sum( (Obs - Exp)^2/Exp )
Pearson_stat
Obs = c(1, 9)
Exp = c(9, 1)
Prob= Exp / sum(Exp)
tb = rbind( Obs, Exp)
chisq.test( Obs, p=Prob)
Pearson_stat = sum( (Obs - Exp)^2/Exp )
Pearson_stat
1 - pchisq(Pearson_stat, 1)
chisq.test(tb)
chisq.test( Obs, Exp)
Obs = c(1, 5)
Exp = c(5, 1)
Prob= Exp / sum(Exp)
chisq.test( Obs, p=Prob)
Pearson_stat = sum( (Obs - Exp)^2/Exp )
Pearson_stat
1 - pchisq(Pearson_stat, 1)
Obs = c(1, 5)
Exp = c(5, 1)
Prob= Exp / sum(Exp)
chisq.test( Obs, p=Prob)
Pearson_stat = sum( (Obs - Exp)^2/Exp )
Pearson_stat
1 - pchisq(Pearson_stat, 1)
x = 0
i = 0
while ( i < 5 ){
x = x + i
i = i +1
}
x
cluster = c(10, 90)
network= c(100,9000)
tb = rbind(cluster, network)
tb
fisher.test(tb)
ft = fisher.test(tb)
ft
ft$p-value
?ft
str(ft)
ft$p.value
fisher.test(tb)$p.value
setwd("~/Dropbox/shared.dropbox/students.dp/metric_survey_researchDay2013/metric_sci_analysis")
